CF::Impure=1

CF::Size = [ s 1080 1080 ]

startshape PICTURE

CF::Background = [h 240 sat 0.5 b -0.6]

path SIMPLE_ARC (number start_x, number start_y, number end_x, number end_y, number radius, number cw, number large, number stroke) {
	MOVETO(start_x, start_y)
 	 if (cw == 1) {
 	 	if (large == 1) {
 	 		ARCTO(end_x, end_y, radius, CF::ArcLarge + CF::ArcCW)
 	 	} else {
 	 		ARCTO(end_x, end_y, radius, CF::ArcCW)
 	 	}
 	 } else {
 	 	if (large == 1) {
 	 		ARCTO(end_x, end_y, radius, CF::ArcLarge)
 	 	} else {
	 		ARCTO(end_x, end_y, radius)
 		}
 	}
	STROKE (stroke)[]
}

shape SHATTERED(number x_pos, number y_pos, number radius) {

	ray_size = 20
	ray_half = ray_size / 2

	diameter = radius * 2

	bigger_part_ratio = (x_pos + ray_half) / ray_size
	smaller_part_ratio = 1 - (x_pos + ray_half) / ray_size
	area_in_ray = 
		if (radius > ray_half + x_pos, ray_half + x_pos, radius) # left half 
		+ if (radius > ray_half - x_pos, ray_half - x_pos, radius) # right half
	
	left_exceeding = if ( radius > ray_half + x_pos , radius - (ray_half + x_pos), 0 )
	right_exceeding = if ( radius > ray_half - x_pos , radius - ( ray_half - x_pos ), 0 )

	left_total = left_exceeding + smaller_part_ratio * area_in_ray
	right_total = right_exceeding + bigger_part_ratio * area_in_ray

	circle_x = ray_half + (right_total - radius)

	loop i = radius [] {

		brightnezz = 0.6 - (i / radius) * 0.25 

		# smaller part
		transform [ sat 0.3 ] {
			if (i > (radius - left_total)) {
				bb = radius - left_total 
				cc = i
				aa = sqrt(cc * cc - bb * bb)
				SIMPLE_ARC(-1 * ray_half, y_pos + aa, -1 * ray_half, y_pos - aa, i, 0, 0, 1) [ b brightnezz ]
			}
			# larger part
			if (i < (right_total - radius + 1)) {
				CIRCLE [ x circle_x y_pos s (i * 2 + 1) b brightnezz ]
			} else {
				bb = radius - right_total
				cc = i 
				aa = sqrt(cc * cc - bb * bb)
				SIMPLE_ARC(ray_half, y_pos - aa, ray_half, y_pos + aa , i, 0, 1, 1 ) [ b brightnezz ]
			}
		}
	}
	
	
}

path RAY_PATH {
	MOVETO( 0, 0 )
	LINETO( 0, 500 )
	STROKE ( 1 ) []
}

shape RAY {
	loop i = 10 [] {
		loop j = 2 [] {
			RAY_PATH [ x if(j == 0, i * -1, i) h 250 b (0.9 - i * 0.05) sat (0.4 + i * 0.05) ]
		}
	}
}

rand_hue() = rand() * 360

shape BACKGROUND {
	CIRCLE [ z -5 b 1 s 1000 ]
}

shape GUN {
	loop i = 50 [] {
		CIRCLE [ h 345 sat 1 b (0.5 + 0.005 * i) s ((50 - i) * 3) ] 
	}	
	loop i = 8 [] {
		transform [r (i * 45)] {
			loop j = 12 [] {
				loop k = 2 [] {
					loop m = 70 [] {
						SQUARE [ x (j * if(k == 0, 1, -1)) y (m + 70) sat 1 b (0.7 - j * 0.03) z -1 h 345 ]
					}
				}
			} 
		}
	}
}

angle = 90 - 45 / 2
aaa = cos(angle)
bbb = 1 - sin(angle)

dist_const = sqrt(aaa * aaa + bbb + bbb)

shape RANDOM_SHATERRED (number y_pos) {
	if (y_pos <= 420) {
		if (rand() > 0.99) {
			rand_x = rand() * 10
			rand_rad_fixed = rand()
			compute_max_rand = dist_const * rand_rad_fixed * y_pos
			rand_rad = if (compute_max_rand > 80, rand() * 80, compute_max_rand)
			if ( rand() > 0.5) {
				SHATTERED (rand_x, y_pos, rand_rad) [ h rand_hue() ]
			} else {
				transform [ flip 90 ] {
					SHATTERED (rand_x, y_pos, rand_rad) [ h rand_hue() ]
				}
			}
			RANDOM_SHATERRED (y_pos + (rand_rad + 80)) []
		} else {
			RANDOM_SHATERRED (y_pos + 1) []
		}
	}
}

shape HALF_STICK {
	RAY []
	RANDOM_SHATERRED (180) []
}

shape STICK {
	HALF_STICK []
	HALF_STICK [ flip 0 ]
}

shape STICKS {
	loop i = 4 [] {
		STICK [ r (45 * i) ]
	}	
}

path STAR {
	MOVETO (1, 0)
	loop i = 5 [] {
		LINETO ( cos(36 + i * 72) * 0.4, sin(36 + i * 72) * 0.4 )
		LINETO ( cos(72 + i * 72) , sin(72 + i * 72))
	}
	CLOSEPOLY()
	FILL [ h 60 sat 1 b 1 ]
}

shape STARS {
	loop i = 200 [] {
		STAR [ x (rand() * 1000 - 500) y (rand() * 1000 - 500) s (rand() * rand() * 10) r (rand() * 72) ]
	}
}

shape PICTURE {
	
	BACKGROUND [ ]

	STARS []

	GUN [ z 10 ]

	STICKS []

}
