CF::Impure=1

startshape PICTURE


width = 1920
height = 1080


shape HILL {
	loop i = height [] {
		loop j = (sqrt(i) * 10) [] {
			SQUARE [ x (j - width / 2) y (i * -1 + height / 2) b 0.5 ]
		}
	}	
}

path RAMP_PATH (number end_degrees) {
	MOVETO(-1, 0)
	ARCTO(cos(end_degrees), sin(end_degrees), 1)
	LINETO(cos(end_degrees) + 0.5, sin(end_degrees))
	LINETO(cos(end_degrees) + 0.5, -1.5)
	LINETO(-1.5, -1.5)
	LINETO(-1.5, 0)
	LINETO(-1, 0)
	CLOSEPOLY()
	FILL []
}


radius = 50

shape COLOUR_BALL {
	loop i = 360 [] {
		loop j = 15 [] {
			CIRCLE [ h (i + j * 30) x (cos(i) * j) y (sin(i) * j) sat 1 b 1 ] 
		}
	}
}

start_speed = 10.5

shape RAMP (number end_degrees) {
	RAMP_PATH (end_degrees) [ b 0.5 s radius ]
	COLOUR_BALL [ x -35 ]
	COLOUR_BALL [ y -35 ]
	BOUNCE (0, 50, start_speed, 0, 0, 0) [ x 35 ]
}

constant = 45

get_difference(number x_position, number speed) = (x_position * speed - x_position * x_position / constant) - ((x_position + 1) * speed - (x_position + 1) * (x_position + 1) / constant)

get_basic_raising_counter(number n) = if(get_difference(n, start_speed) > 0, n, get_difference(n + 1, start_speed))

basic_raising_counter = get_basic_raising_counter(0)

shape BOUNCE (number total_x_position, number x_position, number speed, number is_falling_counter, number is_raising_counter, number first_y_position) {

	difference = get_difference(x_position, speed)

	is_falling = difference > 0

	CIRCLE [ s 5 b (if(is_falling, 0.5, 0)) ]

	if ( total_x_position < 1800) {
		if (is_falling_counter > 100) {
			BOUNCE (total_x_position + 1, is_raising_counter - is_falling_counter, speed * 0.95, 0, 0, 0) []
		} else {
			BOUNCE (total_x_position + 1, x_position + 1, speed, if (is_falling, is_falling_counter + 1, is_falling_counter), if (is_falling, is_raising_counter, is_raising_counter + 1), 0) [ x 1 y (difference * (-1)) ]
		}
	}

	# if (is_falling_counter < 140) {
	# 	CIRCLE [ s 5 x (total_x_position + 35) y ((x_position * speed - x_position * x_position / 30) - first_y_position) b (if(is_falling, 0.5, 0)) ]
	# 	if (total_x_position < 1500) {
	# 		BOUNCE(total_x_position + 1, x_position + 1, speed, if (is_falling, is_falling_counter + 1, is_falling_counter), if (is_falling, is_raising_counter, is_raising_counter + 1), first_y_position) [ ]
	# 	}
	# } else {
	# 	original_x_position = is_raising_counter - is_falling_counter
	# 	new_first_y_position = (original_x_position * speed - original_x_position * original_x_position / 30)
	# 	BOUNCE (total_x_position + 1, is_raising_counter - is_falling_counter, speed * 0.7, 0, 0, original_x_position) []
	# }
}

shape POSITIONED_RAMP {
	y_progression = 850
	RAMP (360 - 10) [ y (height / 2 - y_progression) x (width / 2 * -1 + sqrt(y_progression) * 10 + radius)  ]
}

shape DEBUG {
	loop i = () [ ] {
		SQUARE [ h i x i ]
	}
}

# CF::Size = [ s width height ]

shape PICTURE {
	#HILL []
	DEBUG []
	#POSITIONED_RAMP []
}
